name: Quarkiverse Prepare Release

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      release-version:
        description: "Released Version"
        value: ${{ jobs.prepare-release.outputs.release-version }}
      next-version:
        description: "Next Version"
        value: ${{ jobs.prepare-release.outputs.next-version }}

permissions:
  contents: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    name: Prepare Release
    if: ${{github.event.pull_request.merged == true}}
    # Map the job outputs to step outputs
    outputs:
      release-version: ${{ steps.out.outputs.release-version }}
      next-version: ${{ steps.out.outputs.next-version }}

    steps:
      - uses: actions/checkout@v4

      - uses: radcortez/project-metadata-action@main
        name: Retrieve project metadata
        id: metadata
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          metadata-file-path: '.github/project.yml'
          local-file: true

      - name: Set environment variables
        run: |
          echo "CURRENT_VERSION=${{steps.metadata.outputs.current-version}}" >> $GITHUB_ENV
          echo "NEXT_VERSION=${{steps.metadata.outputs.next-version}}" >> $GITHUB_ENV

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: 'maven'

      - name: Configure Git author
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update latest release version in docs
        run: |
          mvn -B -ntp -pl docs -am package -DskipTests -DskipITs -Denforcer.skip -Dformatter.skip -Dimpsort.skip
          if ! git diff --quiet docs/modules/ROOT/pages/includes; then
            git add docs/modules/ROOT/pages/includes
            git commit -m "Update the latest release version ${{env.CURRENT_VERSION}} in documentation"
          fi

      - name: Maven release ${{env.CURRENT_VERSION}}
        run: |
          mvn -B release:prepare -Prelease -DreleaseVersion=${CURRENT_VERSION} -DdevelopmentVersion=${NEXT_VERSION} -DscmCommentPrefix="[skip ci] " -Darguments="-Dgpg.skip=true"
          mvn -B release:clean

      - name: Push changes to ${{github.base_ref}} branch and tag ${{env.CURRENT_VERSION}}
        run: |
          git push
          git push origin ${CURRENT_VERSION}

      - name: Output release version
        id: out
        run: |
          echo "release-version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "next-version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
